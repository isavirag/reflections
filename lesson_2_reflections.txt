What happens when you initialize a repository? Why do you need to do it?

	Git is now aware of the files (tracking them) and makes them be ready to be staged if you decide to do so

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	It stages files (prepares them) to be committed to the repo. It gives a step to correct any mistakes before committing.

How can you use the staging area to make sure you have one commit per logical
change?
	
	If you add a file to the staging area once you finish a logical change, using git status, the staging area will show which files need to be commited. If you make sure to stage each group of files that are working towards the same goal, the staging area should help you keep those changes in check.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches allow you to create a different version of your program, or test a new feature without changing the main program at all.

How do the diagrams help you visualize the branch structure?
	
	Diagrams help you understand where the master branch separates from other branches and what commits have happened since on each.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	It combines the latest changes from two different branches, leaving behind anything that was deleted in either branch. We represent it with connections to both old branches since all commits are stored.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	Git can logically figure out what to merge automatically using the basic logic that new code needs to be added into others. Conflicts resolved also help in case the same code was modified.